<?php

$loader = require __DIR__ . '/vendor/autoload.php';

// todo; fix autoloader of composer so this is not needed...
require __DIR__ . '/vendor/barkgj/datasink-library/src/datasink-entity.php';
require __DIR__ . '/vendor/barkgj/functions-library/src/filesystem.php';

require __DIR__ . '/tasks.php';

use barkgj\functions;
use barkgj\tasks;
use barkgj\datasink\entity;

if (false)
{
    // used to trick the visualcode in thinking these functions exists even though we are outside the wp environment
	function wp_parse_args(){return array();}
	function shortcode_parse_atts(){return array();}
	function do_shortcode(){}
}

if (!function_exists("functions__override__getsitedatafolder"))
{
    function functions__override__getsitedatafolder()
    {
        return "C:\\site1\\";
    }
}

/*
if (false)
{
    echo "Hello world :)";
}
*/

/*
if (false)
{
    global $argv;
    var_dump($argv);
}
*/

if (false)
{
    $taskid = 1;
    // create entity on the fly for now
    $storeargs = array
    (
        "datasink_invokedbytaskid" => "x",
        "datasink_invokedbytaskinstanceid" => "x",

        "datasink_realm" => "tasks",
        "datasink_entitytype" => "task",
        "id" => $taskid,
        "title" => "autogeneratedtasktitle",
        "datasink_alreadyfoundbehaviour" => "SKIP",
        "datasink_accoladesfoundbehaviour" => "THROW_NACK"
    );
    $r = entity::storeentitydata($storeargs);
    var_dump($r);
    die();
}

if (false)
{
    $taskid = 1;
    $existsargs = array
    (
        "datasink_realm" => "tasks",
        "datasink_entitytype" => "task",
        "id" => $taskid
    );
    $x = entity::debugentity($existsargs);
    var_dump($x);
    die();
}

if (false)
{
    $g=functions::create_guid();
    $taskid = 1;
    $existsargs = array
    (
        "datasink_realm" => "tasks",
        "datasink_entitytype" => "task_{$taskid}_instances",
        "id" => $g
    );
    $r = entity::entityexists($existsargs);
    var_dump($r);
}

if (false)
{
    $taskid = 1;
    $assigned_to = 1;
    $createdby_taskid = "";
    $createdby_taskinstanceid = "";
    $mail_assignee = "n";
    $inputparameters = array("foo" => "bar");

    $ti = tasks::createtaskinstance($taskid, $assigned_to, $createdby_taskid, $createdby_taskinstanceid, $mail_assignee, $inputparameters);
    var_dump($ti);
}

if (false)
{
    $taskid = 1;
    $entitiesrawargs = array
    (
        "datasink_realm" => "tasks",
        "datasink_entitytype" => "task_{$taskid}_instances",
        "datasink_include_meta" => false,
    );
    $r = entity::getentitiesraw($entitiesrawargs);
    var_dump($r);
}

if (false)
{
    $taskid = 1;
    $taskinstanceid = "CFAC5ACB-DC26-4C34-A86D-B4FBEAF9E74F";
    $ti = tasks::gettaskinstance($taskid, $taskinstanceid);
    var_dump($ti);
}

if (false)
{
    $taskid = 1;
    $i = tasks::getinstances($taskid);
    var_dump($i);
}

if (false)
{
    $taskid = 1;
    $meta = tasks::gettaskmeta($taskid);
    var_dump($meta);
}

if (true)
{
    $taskid = 1;
    $taskinstanceid = "CFAC5ACB-DC26-4C34-A86D-B4FBEAF9E74F";

    $instance = tasks::gettaskinstance($taskid, $taskinstanceid);
    echo "before:\r\n";
    var_dump($instance);

    $appendresult = tasks::appendinputparameter_for_taskinstance($taskid, $taskinstanceid, "hello", "world" . time());
    $appendresult = tasks::appendinputparameter_for_taskinstance($taskid, $taskinstanceid, "foo" . time(), "bar");
    // var_dump($appendresult);

    $instance = tasks::gettaskinstance($taskid, $taskinstanceid);
    echo "after:\r\n";
    var_dump($instance);




    /*
    $state = tasks::getinstancestate($taskid, $taskinstanceid);
    echo $state;
    */

    /*
    $a = "CFAC5ACB-DC26-4C34-A86D-B4FBEAF9E74F";
    echo $a;
    echo "\r\n";
    echo "\r\n";
    echo md5($a);
    echo "\r\n";
    echo "\r\n";
    */

    //$a = "a5c584e70bf85ab23916ecf5d4d8bd0b";

}

die();