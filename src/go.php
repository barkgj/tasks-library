<?php

$loader = require __DIR__ . '/vendor/autoload.php';

// todo; fix autoloader of composer so this is not needed...
require __DIR__ . '/vendor/barkgj/datasink-library/src/datasink-entity.php';
require __DIR__ . '/vendor/barkgj/functions-library/src/filesystem.php';

require __DIR__ . '/tasks.php';

use barkgj\functions;
use barkgj\tasks\tasks;
use barkgj\datasink\entity;
use barkgj\tasks\itaskinstruction;

if (false)
{
    // used to trick the visualcode in thinking these functions exists even though we are outside the wp environment
	function wp_parse_args(){return array();}
	function shortcode_parse_atts(){return array();}
	function do_shortcode(){}
}

if (!function_exists("functions__override__getsitedatafolder"))
{
    function functions__override__getsitedatafolder()
    {
        return "C:\\site1\\";
    }
}

// load dependent wp functions in case invoked from outside wp (when invoked from cli)
require_once("wp-functions.php");

/*
if (false)
{
    echo "Hello world :)";
}
*/

/*
if (false)
{
    global $argv;
    var_dump($argv);
}
*/

if (false)
{
    $taskid = 1;
    // create entity on the fly for now
    $storeargs = array
    (
        "datasink_invokedbytaskid" => "x",
        "datasink_invokedbytaskinstanceid" => "x",

        "datasink_realm" => "tasks",
        "datasink_entitytype" => "task",
        "id" => $taskid,
        "title" => "autogeneratedtasktitle",
        "datasink_alreadyfoundbehaviour" => "SKIP",
        "datasink_accoladesfoundbehaviour" => "THROW_NACK"
    );
    $r = entity::storeentitydata($storeargs);
    var_dump($r);
    die();
}

if (false)
{
    $taskid = 1;
    $existsargs = array
    (
        "datasink_realm" => "tasks",
        "datasink_entitytype" => "task",
        "id" => $taskid
    );
    $x = entity::debugentity($existsargs);
    var_dump($x);
    die();
}

if (false)
{
    $g=functions::create_guid();
    $taskid = 1;
    $existsargs = array
    (
        "datasink_realm" => "tasks",
        "datasink_entitytype" => "task_{$taskid}_instances",
        "id" => $g
    );
    $r = entity::entityexists($existsargs);
    var_dump($r);
}

if (false)
{
    $taskid = 1;
    $assigned_to = 1;
    $createdby_taskid = "";
    $createdby_taskinstanceid = "";
    $mail_assignee = "n";
    $inputparameters = array("foo" => "bar");

    $ti = tasks::createtaskinstance($taskid, $assigned_to, $createdby_taskid, $createdby_taskinstanceid, $mail_assignee, $inputparameters);
    var_dump($ti);
}

if (false)
{
    $taskid = 1;
    $entitiesrawargs = array
    (
        "datasink_realm" => "tasks",
        "datasink_entitytype" => "task_{$taskid}_instances",
        "datasink_include_meta" => false,
    );
    $r = entity::getentitiesraw($entitiesrawargs);
    var_dump($r);
}

if (false)
{
    $taskid = 1;
    $taskinstanceid = "CFAC5ACB-DC26-4C34-A86D-B4FBEAF9E74F";
    $ti = tasks::gettaskinstance($taskid, $taskinstanceid);
    var_dump($ti);
}

if (false)
{
    $taskid = 1;
    $i = tasks::gettaskinstances($taskid);
    var_dump($i);
}

if (false)
{
    $taskid = 1;
    $i = tasks::gettaskinstanceids($taskid);
    var_dump($i);
}

if (false)
{
    $taskid = 1;
    $meta = tasks::gettaskmeta($taskid);
    var_dump($meta);
}

if (false)
{
    $taskid = 1;
    $taskinstanceid = "CFAC5ACB-DC26-4C34-A86D-B4FBEAF9E74F";

    $instance = tasks::gettaskinstance($taskid, $taskinstanceid);
    echo "before:\r\n";
    var_dump($instance);

    $appendresult = tasks::appendinputparameter_for_taskinstance($taskid, $taskinstanceid, "hello", "world" . time());
    $appendresult = tasks::appendinputparameter_for_taskinstance($taskid, $taskinstanceid, "foo" . time(), "bar");
    // var_dump($appendresult);

    $instance = tasks::gettaskinstance($taskid, $taskinstanceid);
    echo "after:\r\n";
    var_dump($instance);
}

if (false)
{
    $taskid = 1;
    $taskinstanceid = "CFAC5ACB-DC26-4C34-A86D-B4FBEAF9E74F";

    $r = tasks::getreflectionmeta($taskid, $taskinstanceid);

    var_dump($r);
}

if (false)
{
    $taskid = 1;
    $taskinstanceid = "CFAC5ACB-DC26-4C34-A86D-B4FBEAF9E74F";

    $r = tasks::gettaskinstancestate($taskid, $taskinstanceid);

    var_dump($r);
}

if (false)
{
    $taskinstructions = array();

    tasks::ensuretaskinstructionloaded("set_stateparameter");

    $taskid = 1;
    $taskinstanceid = "CFAC5ACB-DC26-4C34-A86D-B4FBEAF9E74F";

    $taskinstructions[] = new barkgj\tasks\taskinstruction\set_stateparameter();


    $r = tasks::gettaskinstance($taskid, $taskinstanceid);

    var_dump($r);
}

if (false)
{
    $taskids = tasks::gettaskids();
    foreach ($taskids as $taskid)
    {
        echo "------\r\n";
        echo "task: {$taskid}\r\n";
        echo "instanceS:";
        $taskinstanceids = tasks::gettaskinstanceids($taskid);
        foreach ($taskinstanceids as $taskinstanceid)
        {
            echo "taskinstanceid: {$taskinstanceid}\r\n";
        }
    }
    echo "thats all...\r\n";
}

if (true)
{
    $searchargs = array
    (
        "if_this" => array
        (
            "type" => "true_if_in_any_of_the_required_states",
            "any_of_the_required_states" => array("CREATED", "STARTED"),
        ),
        "return_this" => "details",
    );
    $taskinstances = tasks::searchtaskinstances($searchargs);
    foreach ($taskinstances as $taskinstance)
    {
        
        echo "found taskinstance;\r\n";
        var_dump($taskinstance);
        echo "\r\n";
        echo "-------\r\n";
    }
}






    /*
    $state = tasks::getinstancestate($taskid, $taskinstanceid);
    echo $state;
    */

    /*
    $a = "CFAC5ACB-DC26-4C34-A86D-B4FBEAF9E74F";
    echo $a;
    echo "\r\n";
    echo "\r\n";
    echo md5($a);
    echo "\r\n";
    echo "\r\n";
    */

    //$a = "a5c584e70bf85ab23916ecf5d4d8bd0b";



die();